# -*- coding: utf-8 -*-
"""find_5_colors.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KoBD6aLexfoVjXeNsrspqalkWu0hjc8Z
"""

## Find 5 Colors
# Updated 2/20/2024 - Joseph Huang
# Created 2/12/2024 - Joseph Huang

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %ls

# Commented out IPython magic to ensure Python compatibility.
# %cd drive/MyDrive

# Commented out IPython magic to ensure Python compatibility.
# %cd VIP-SD(Spring2024)

import matplotlib.pyplot as plt
import numpy as np
from PIL import Image

# Specify the path to the image
IMG_PATH = 'test_images/IMG_2170.jpg'
IMG_PATH2 = 'test_images/IMG_2167.jpg'
IMG_PATH3 = 'test_images/IMG_2165.jpg'
IMG_PATH4 = 'test_images/IMG_2163.jpg'

# Load image using Mathplotlib
image = plt.imread(IMG_PATH)
image2 = plt.imread(IMG_PATH2)
image3 = plt.imread(IMG_PATH3)
image4 = plt.imread(IMG_PATH4)

# Resize image to have width 250px to speed up algorithm
with Image.open(IMG_PATH) as img:
  width, height = img.size
  new_width = 250
  new_height = 100
  image = np.array(img.resize((new_width, new_height)))

with Image.open(IMG_PATH2) as img2:
  width, height = img2.size
  new_width = 250
  new_height = 100
  image2 = np.array(img2.resize((new_width, new_height)))

with Image.open(IMG_PATH3) as img3:
  width, height = img3.size
  new_width = 250
  new_height = 100
  image3 = np.array(img3.resize((new_width, new_height)))

with Image.open(IMG_PATH4) as img4:
  width, height = img4.size
  new_width = 250
  new_height = 100
  image4 = np.array(img4.resize((new_width, new_height)))

plt.imshow(image)

x = 50
y = 90
z = 125
w = 155
v = 205

copy_img = image
for i in range(len(image)):
  copy_img[i][x][0] = 255
  copy_img[i][x][1] = 255
  copy_img[i][x][2] = 0

for i in range(len(image)):
  copy_img[i][y][0] = 255
  copy_img[i][y][1] = 255
  copy_img[i][y][2] = 0

for i in range(len(image)):
  copy_img[i][z][0] = 255
  copy_img[i][z][1] = 255
  copy_img[i][z][2] = 0

for i in range(len(image)):
  copy_img[i][w][0] = 255
  copy_img[i][w][1] = 255
  copy_img[i][w][2] = 0

for i in range(len(image)):
  copy_img[i][v][0] = 255
  copy_img[i][v][1] = 255
  copy_img[i][v][2] = 0

copy_img2 = image2
for i in range(len(image)):
  copy_img2[i][x][0] = 255
  copy_img2[i][x][1] = 255
  copy_img2[i][x][2] = 0

for i in range(len(image)):
  copy_img2[i][y][0] = 255
  copy_img2[i][y][1] = 255
  copy_img2[i][y][2] = 0

for i in range(len(image)):
  copy_img2[i][z][0] = 255
  copy_img2[i][z][1] = 255
  copy_img2[i][z][2] = 0

for i in range(len(image)):
  copy_img2[i][w][0] = 255
  copy_img2[i][w][1] = 255
  copy_img2[i][w][2] = 0

for i in range(len(image)):
  copy_img2[i][v][0] = 255
  copy_img2[i][v][1] = 255
  copy_img2[i][v][2] = 0

copy_img3 = image3
for i in range(len(image)):
  copy_img3[i][x][0] = 255
  copy_img3[i][x][1] = 255
  copy_img3[i][x][2] = 0

for i in range(len(image)):
  copy_img3[i][y][0] = 255
  copy_img3[i][y][1] = 255
  copy_img3[i][y][2] = 0

for i in range(len(image)):
  copy_img3[i][z][0] = 255
  copy_img3[i][z][1] = 255
  copy_img3[i][z][2] = 0

for i in range(len(image)):
  copy_img3[i][w][0] = 255
  copy_img3[i][w][1] = 255
  copy_img3[i][w][2] = 0

for i in range(len(image)):
  copy_img3[i][v][0] = 255
  copy_img3[i][v][1] = 255
  copy_img3[i][v][2] = 0

copy_img4 = image4
for i in range(len(image)):
  copy_img4[i][x][0] = 255
  copy_img4[i][x][1] = 255
  copy_img4[i][x][2] = 0

for i in range(len(image)):
  copy_img4[i][y][0] = 255
  copy_img4[i][y][1] = 255
  copy_img4[i][y][2] = 0

for i in range(len(image)):
  copy_img4[i][z][0] = 255
  copy_img4[i][z][1] = 255
  copy_img4[i][z][2] = 0

for i in range(len(image)):
  copy_img4[i][w][0] = 255
  copy_img4[i][w][1] = 255
  copy_img4[i][w][2] = 0

for i in range(len(image)):
  copy_img4[i][v][0] = 255
  copy_img4[i][v][1] = 255
  copy_img4[i][v][2] = 0

fig, axs = plt.subplots(2, 2)
axs[0, 0].imshow(copy_img)
axs[0, 1].imshow(copy_img2)
axs[1, 0].imshow(copy_img3)
axs[1, 1].imshow(copy_img4)
plt.show()

color_set = {
    (0, 0, 0):        'Black',
    (69, 51, 47):     'Brown',
    (41, 14, 7):      'Brown',
    (95, 33, 36):     'Red',
    (202, 144, 72):   'Orange',
    (104, 117, 47):   'Yellow',
    (157, 191, 121):  'Yellow',
    (58, 96, 82):     'Green',
    (33, 69, 5):      'Green',
    (85, 123, 110):   'Violet',
    (255, 255, 255):  'White',
    (69, 105, 137):   'Resistor Backing Blue',
    (75, 97, 120):    'Resistor Backing Blue',
    (68, 90, 113):    'Resistor Backing Blue',
    (90, 107, 123):   'Resistor Backing Blue'
}

def find_closest(pixel_value, color_set):
    closest_key = min(color_set, key=lambda x: np.linalg.norm(np.array(x) - np.array(pixel_value)))
    return color_set[closest_key]

def most_common(list_of_colors):
    max_count = 0
    most_common = None
    for i in list_of_colors:  # check if i is most common
        count = 0
        for j in list_of_colors:  #check all other letters in list to count
            if j == i:
                count += 1
        if count > max_count:
            max_count = count
            most_common = i
    return most_common

color_list = []
row = len(image)

image = image3

band1_list = []
for i in range(row):
  if i >= 19 and i < 80:
    band1_list.append(find_closest(image[i][50], color_set))
color_list.append(most_common(band1_list))

band2_list = []
for i in range(row):
  if i >= 19 and i < 80:
    band2_list.append(find_closest(image[i][90], color_set))
if (band2_list.count("Resistor Backing Blue") > 10):
  band2_list = []
  for i in range(row):
    if i >= 19 and i < 80:
        band2_list.append(find_closest(image[i][95], color_set))
color_list.append(most_common(band2_list))

band3_list = []
for i in range(row):
  if i >= 19 and i < 80:
    band3_list.append(find_closest(image[i][120], color_set))
if (band3_list.count("Resistor Backing Blue") > 10):
  band3_list = []
  for i in range(row):
    if i >= 19 and i < 80:
        band3_list.append(find_closest(image[i][125], color_set))
color_list.append(most_common(band3_list))

band4_list = []
for i in range(row):
  if i >= 19 and i < 80:
      band4_list.append(find_closest(image[i][155], color_set))
if (band4_list.count("Resistor Backing Blue") > 10):
  band4_list = []
  for i in range(row):
    if i >= 19 and i < 80:
        band4_list.append(find_closest(image[i][160], color_set))
color_list.append(most_common(band4_list))

band5_list = []
for i in range(row):
  if i >= 19 and i < 80:
      band5_list.append(find_closest(image[i][205], color_set))
if (band5_list.count("Resistor Backing Blue") > 10):
  band5_list = []
  for i in range(row):
    if i >= 19 and i < 80:
        band5_list.append(find_closest(image[i][215], color_set))
color_list.append(most_common(band5_list))

print(color_list)

# Value of the resistor bands. First 3 bands use this (5-band resistor)
resistor_value = {
    'Black': 0,
    'Brown': 1,
    'Red': 2,
    'Orange': 3,
    'Yellow': 4,
    'Green': 5,
    'Blue': 6,
    'Violet': 7,
    'Gray': 8,
    'White': 9
}

# Value of multiplies based on color. 4th band on 5-band resistor
resistor_multiplier = {
    'Black': 1,
    'Brown': 10,
    'Red': 100,
    'Orange': 1000,
    'Yellow': 10000,
    'Green': 100000,
    'Blue': 1000000,
    'Violet': 10000000,
    'Gray': 100000000,
    'White': 1000000000
}

# Used to format resistor value at end
multipliers = {0: '', 3: 'k', 6: 'M', 9: 'G', 12: 'T'}

# Calculate Resistor Value based on detected colors
starting_value = ""
for i in range(len(color_list)):
  if i < 3:
    starting_value += str(resistor_value.get(color_list[i]))
  if i == 3:
    raw_value = int(starting_value)
    raw_value *= resistor_multiplier.get(color_list[i])

print("Resistor Value:", raw_value)

# Format Resistor Value with k/M/G/T
for exponent, letter in sorted(multipliers.items(), reverse=True):
  if raw_value >= 10**exponent:
    value = raw_value / 10**exponent
    formatted_value = f'{value:.2f}{letter}Ω'
    break

if formatted_value is None:
    formatted_value = f'{raw_value:.2f}Ω'

print("Formatted Resistor Value:", formatted_value)